; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_rcc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32f10x_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\stm32f10x_rcc.crf ..\..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rcc.c]
                          THUMB

                          AREA ||i.RCC_ADCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_ADCCLKConfig PROC
;;;761      */
;;;762    void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
000000  4601              MOV      r1,r0
;;;763    {
;;;764      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;765      /* Check the parameters */
;;;766      assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
;;;767      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L1.20|
000006  6850              LDR      r0,[r2,#4]
;;;768      /* Clear ADCPRE[1:0] bits */
;;;769      tmpreg &= CFGR_ADCPRE_Reset_Mask;
000008  f4204040          BIC      r0,r0,#0xc000
;;;770      /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
;;;771      tmpreg |= RCC_PCLK2;
00000c  4308              ORRS     r0,r0,r1
;;;772      /* Store the new value */
;;;773      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;774    }
000010  4770              BX       lr
;;;775    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40021000

                          AREA ||i.RCC_AHBPeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHBPeriphClockCmd PROC
;;;1046     */
;;;1047   void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
000000  b129              CBZ      r1,|L2.14|
;;;1048   {
;;;1049     /* Check the parameters */
;;;1050     assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
;;;1051     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1052   
;;;1053     if (NewState != DISABLE)
;;;1054     {
;;;1055       RCC->AHBENR |= RCC_AHBPeriph;
000002  4a06              LDR      r2,|L2.28|
000004  6952              LDR      r2,[r2,#0x14]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L2.28|
00000a  615a              STR      r2,[r3,#0x14]
00000c  e004              B        |L2.24|
                  |L2.14|
;;;1056     }
;;;1057     else
;;;1058     {
;;;1059       RCC->AHBENR &= ~RCC_AHBPeriph;
00000e  4a03              LDR      r2,|L2.28|
000010  6952              LDR      r2,[r2,#0x14]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L2.28|
000016  615a              STR      r2,[r3,#0x14]
                  |L2.24|
;;;1060     }
;;;1061   }
000018  4770              BX       lr
;;;1062   
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;1105     */
;;;1106   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L3.14|
;;;1107   {
;;;1108     /* Check the parameters */
;;;1109     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1110     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1111     if (NewState != DISABLE)
;;;1112     {
;;;1113       RCC->APB1ENR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L3.28|
000004  69d2              LDR      r2,[r2,#0x1c]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L3.28|
00000a  61da              STR      r2,[r3,#0x1c]
00000c  e004              B        |L3.24|
                  |L3.14|
;;;1114     }
;;;1115     else
;;;1116     {
;;;1117       RCC->APB1ENR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L3.28|
000010  69d2              LDR      r2,[r2,#0x1c]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L3.28|
000016  61da              STR      r2,[r3,#0x1c]
                  |L3.24|
;;;1118     }
;;;1119   }
000018  4770              BX       lr
;;;1120   
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;1192     */
;;;1193   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L4.14|
;;;1194   {
;;;1195     /* Check the parameters */
;;;1196     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1197     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1198     if (NewState != DISABLE)
;;;1199     {
;;;1200       RCC->APB1RSTR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L4.28|
000004  6912              LDR      r2,[r2,#0x10]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L4.28|
00000a  611a              STR      r2,[r3,#0x10]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;1201     }
;;;1202     else
;;;1203     {
;;;1204       RCC->APB1RSTR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L4.28|
000010  6912              LDR      r2,[r2,#0x10]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L4.28|
000016  611a              STR      r2,[r3,#0x10]
                  |L4.24|
;;;1205     }
;;;1206   }
000018  4770              BX       lr
;;;1207   
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;1075     */
;;;1076   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L5.14|
;;;1077   {
;;;1078     /* Check the parameters */
;;;1079     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1080     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1081     if (NewState != DISABLE)
;;;1082     {
;;;1083       RCC->APB2ENR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L5.28|
000004  6992              LDR      r2,[r2,#0x18]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L5.28|
00000a  619a              STR      r2,[r3,#0x18]
00000c  e004              B        |L5.24|
                  |L5.14|
;;;1084     }
;;;1085     else
;;;1086     {
;;;1087       RCC->APB2ENR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L5.28|
000010  6992              LDR      r2,[r2,#0x18]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L5.28|
000016  619a              STR      r2,[r3,#0x18]
                  |L5.24|
;;;1088     }
;;;1089   }
000018  4770              BX       lr
;;;1090   
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;1162     */
;;;1163   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L6.14|
;;;1164   {
;;;1165     /* Check the parameters */
;;;1166     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1167     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1168     if (NewState != DISABLE)
;;;1169     {
;;;1170       RCC->APB2RSTR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L6.28|
000004  68d2              LDR      r2,[r2,#0xc]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L6.28|
00000a  60da              STR      r2,[r3,#0xc]
00000c  e004              B        |L6.24|
                  |L6.14|
;;;1171     }
;;;1172     else
;;;1173     {
;;;1174       RCC->APB2RSTR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L6.28|
000010  68d2              LDR      r2,[r2,#0xc]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L6.28|
000016  60da              STR      r2,[r3,#0xc]
                  |L6.24|
;;;1175     }
;;;1176   }
000018  4770              BX       lr
;;;1177   
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40021000

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;333      */
;;;334    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
000000  4601              MOV      r1,r0
;;;335    {
;;;336      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;337      /* Check the parameters */
;;;338      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;339      tmpreg = RCC->CR;
000004  4a03              LDR      r2,|L7.20|
000006  6810              LDR      r0,[r2,#0]
;;;340      /* Clear HSITRIM[4:0] bits */
;;;341      tmpreg &= CR_HSITRIM_Mask;
000008  f02000f8          BIC      r0,r0,#0xf8
;;;342      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;343      tmpreg |= (uint32_t)HSICalibrationValue << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;344      /* Store the new value */
;;;345      RCC->CR = tmpreg;
000010  6010              STR      r0,[r2,#0]
;;;346    }
000012  4770              BX       lr
;;;347    
                          ENDP

                  |L7.20|
                          DCD      0x40021000

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;1213     */
;;;1214   void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L8.8|
;;;1215   {
;;;1216     /* Check the parameters */
;;;1217     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1218     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1219   }
000004  4770              BX       lr
;;;1220   
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x42420440

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;1347     */
;;;1348   void RCC_ClearFlag(void)
000000  4803              LDR      r0,|L9.16|
;;;1349   {
;;;1350     /* Set RMVF bit to clear the reset flags */
;;;1351     RCC->CSR |= CSR_RMVF_Set;
000002  6a40              LDR      r0,[r0,#0x24]
000004  f0407080          ORR      r0,r0,#0x1000000
000008  4901              LDR      r1,|L9.16|
00000a  6248              STR      r0,[r1,#0x24]
;;;1352   }
00000c  4770              BX       lr
;;;1353   
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40021000

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;1424     */
;;;1425   void RCC_ClearITPendingBit(uint8_t RCC_IT)
000000  4901              LDR      r1,|L10.8|
;;;1426   {
;;;1427     /* Check the parameters */
;;;1428     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;1429   
;;;1430     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;1431        pending bits */
;;;1432     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7288              STRB     r0,[r1,#0xa]
;;;1433   }
000004  4770              BX       lr
;;;1434   
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x40021000

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;1226     */
;;;1227   void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L11.8|
;;;1228   {
;;;1229     /* Check the parameters */
;;;1230     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1231     *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;1232   }
000004  4770              BX       lr
;;;1233   
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x42420000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;223      */
;;;224    void RCC_DeInit(void)
000000  480f              LDR      r0,|L12.64|
;;;225    {
;;;226      /* Set HSION bit */
;;;227      RCC->CR |= (uint32_t)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  490d              LDR      r1,|L12.64|
00000a  6008              STR      r0,[r1,#0]
;;;228    
;;;229      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;230    #ifndef STM32F10X_CL
;;;231      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  4608              MOV      r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  490c              LDR      r1,|L12.68|
000012  4008              ANDS     r0,r0,r1
000014  490a              LDR      r1,|L12.64|
000016  6048              STR      r0,[r1,#4]
;;;232    #else
;;;233      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;234    #endif /* STM32F10X_CL */   
;;;235      
;;;236      /* Reset HSEON, CSSON and PLLON bits */
;;;237      RCC->CR &= (uint32_t)0xFEF6FFFF;
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  490a              LDR      r1,|L12.72|
00001e  4008              ANDS     r0,r0,r1
000020  4907              LDR      r1,|L12.64|
000022  6008              STR      r0,[r1,#0]
;;;238    
;;;239      /* Reset HSEBYP bit */
;;;240      RCC->CR &= (uint32_t)0xFFFBFFFF;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4202080          BIC      r0,r0,#0x40000
00002c  6008              STR      r0,[r1,#0]
;;;241    
;;;242      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;243      RCC->CFGR &= (uint32_t)0xFF80FFFF;
00002e  4608              MOV      r0,r1
000030  6840              LDR      r0,[r0,#4]
000032  f42000fe          BIC      r0,r0,#0x7f0000
000036  6048              STR      r0,[r1,#4]
;;;244    
;;;245    #ifndef STM32F10X_CL
;;;246      /* Disable all interrupts and clear pending bits  */
;;;247      RCC->CIR = 0x009F0000;
000038  f44f001f          MOV      r0,#0x9f0000
00003c  6088              STR      r0,[r1,#8]
;;;248    #else
;;;249      /* Reset PLL2ON and PLL3ON bits */
;;;250      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;251    
;;;252      /* Disable all interrupts and clear pending bits  */
;;;253      RCC->CIR = 0x00FF0000;
;;;254    
;;;255      /* Reset CFGR2 register */
;;;256      RCC->CFGR2 = 0x00000000;
;;;257    #endif /* STM32F10X_CL */
;;;258    }
00003e  4770              BX       lr
;;;259    
                          ENDP

                  |L12.64|
                          DCD      0x40021000
                  |L12.68|
                          DCD      0xf8ff0000
                  |L12.72|
                          DCD      0xfef6ffff

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;901      */
;;;902    void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  b530              PUSH     {r4,r5,lr}
;;;903    {
;;;904      uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
;;;905    
;;;906    #ifdef  STM32F10X_CL
;;;907      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;908    #endif /* STM32F10X_CL */
;;;909        
;;;910      /* Get SYSCLK source -------------------------------------------------------*/
;;;911      tmp = RCC->CFGR & CFGR_SWS_Mask;
00000a  4d2d              LDR      r5,|L13.192|
00000c  686d              LDR      r5,[r5,#4]
00000e  f005010c          AND      r1,r5,#0xc
;;;912      
;;;913      switch (tmp)
000012  b121              CBZ      r1,|L13.30|
000014  2904              CMP      r1,#4
000016  d005              BEQ      |L13.36|
000018  2908              CMP      r1,#8
00001a  d123              BNE      |L13.100|
00001c  e005              B        |L13.42|
                  |L13.30|
;;;914      {
;;;915        case 0x00:  /* HSI used as system clock */
;;;916          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
00001e  4d29              LDR      r5,|L13.196|
000020  6005              STR      r5,[r0,#0]
;;;917          break;
000022  e022              B        |L13.106|
                  |L13.36|
;;;918        case 0x04:  /* HSE used as system clock */
;;;919          RCC_Clocks->SYSCLK_Frequency = HSE_Value;
000024  4d27              LDR      r5,|L13.196|
000026  6005              STR      r5,[r0,#0]
;;;920          break;
000028  e01f              B        |L13.106|
                  |L13.42|
;;;921        case 0x08:  /* PLL used as system clock */
;;;922    
;;;923          /* Get PLL clock source and multiplication factor ----------------------*/
;;;924          pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
00002a  4d25              LDR      r5,|L13.192|
00002c  686d              LDR      r5,[r5,#4]
00002e  f4051270          AND      r2,r5,#0x3c0000
;;;925          pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
000032  4d23              LDR      r5,|L13.192|
000034  686d              LDR      r5,[r5,#4]
000036  f4053480          AND      r4,r5,#0x10000
;;;926          
;;;927    #ifndef STM32F10X_CL      
;;;928          pllmull = ( pllmull >> 18) + 2;
00003a  2502              MOVS     r5,#2
00003c  eb054292          ADD      r2,r5,r2,LSR #18
;;;929          
;;;930          if (pllsource == 0x00)
000040  b91c              CBNZ     r4,|L13.74|
;;;931          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;932            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
000042  4d21              LDR      r5,|L13.200|
000044  4355              MULS     r5,r2,r5
000046  6005              STR      r5,[r0,#0]
000048  e00b              B        |L13.98|
                  |L13.74|
;;;933          }
;;;934          else
;;;935          {/* HSE selected as PLL clock entry */
;;;936            if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
00004a  4d1d              LDR      r5,|L13.192|
00004c  686d              LDR      r5,[r5,#4]
00004e  f4053500          AND      r5,r5,#0x20000
000052  b11d              CBZ      r5,|L13.92|
;;;937            {/* HSE oscillator clock divided by 2 */
;;;938              RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
000054  4d1c              LDR      r5,|L13.200|
000056  4355              MULS     r5,r2,r5
000058  6005              STR      r5,[r0,#0]
00005a  e002              B        |L13.98|
                  |L13.92|
;;;939            }
;;;940            else
;;;941            {
;;;942              RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
00005c  4d19              LDR      r5,|L13.196|
00005e  4355              MULS     r5,r2,r5
000060  6005              STR      r5,[r0,#0]
                  |L13.98|
;;;943            }
;;;944          }
;;;945    #else
;;;946          pllmull = pllmull >> 18;
;;;947          
;;;948          if (pllmull != 0x0D)
;;;949          {
;;;950             pllmull += 2;
;;;951          }
;;;952          else
;;;953          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;954            pllmull = 13 / 2; 
;;;955          }
;;;956                
;;;957          if (pllsource == 0x00)
;;;958          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;959            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
;;;960          }
;;;961          else
;;;962          {/* PREDIV1 selected as PLL clock entry */
;;;963            
;;;964            /* Get PREDIV1 clock source and division factor */
;;;965            prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
;;;966            prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
;;;967            
;;;968            if (prediv1source == 0)
;;;969            { /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;970              RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
;;;971            }
;;;972            else
;;;973            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;974              
;;;975              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;976              prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
;;;977              pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;978              RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;979            }
;;;980          }
;;;981    #endif /* STM32F10X_CL */ 
;;;982          break;
000062  e002              B        |L13.106|
                  |L13.100|
;;;983    
;;;984        default:
;;;985          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
000064  4d17              LDR      r5,|L13.196|
000066  6005              STR      r5,[r0,#0]
;;;986          break;
000068  bf00              NOP      
                  |L13.106|
00006a  bf00              NOP                            ;917
;;;987      }
;;;988    
;;;989      /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
;;;990      /* Get HCLK prescaler */
;;;991      tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
00006c  4d14              LDR      r5,|L13.192|
00006e  686d              LDR      r5,[r5,#4]
000070  f00501f0          AND      r1,r5,#0xf0
;;;992      tmp = tmp >> 4;
000074  0909              LSRS     r1,r1,#4
;;;993      presc = APBAHBPrescTable[tmp];
000076  4d15              LDR      r5,|L13.204|
000078  5c6b              LDRB     r3,[r5,r1]
;;;994      /* HCLK clock frequency */
;;;995      RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
00007a  6805              LDR      r5,[r0,#0]
00007c  40dd              LSRS     r5,r5,r3
00007e  6045              STR      r5,[r0,#4]
;;;996      /* Get PCLK1 prescaler */
;;;997      tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
000080  4d0f              LDR      r5,|L13.192|
000082  686d              LDR      r5,[r5,#4]
000084  f40561e0          AND      r1,r5,#0x700
;;;998      tmp = tmp >> 8;
000088  0a09              LSRS     r1,r1,#8
;;;999      presc = APBAHBPrescTable[tmp];
00008a  4d10              LDR      r5,|L13.204|
00008c  5c6b              LDRB     r3,[r5,r1]
;;;1000     /* PCLK1 clock frequency */
;;;1001     RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
00008e  6845              LDR      r5,[r0,#4]
000090  40dd              LSRS     r5,r5,r3
000092  6085              STR      r5,[r0,#8]
;;;1002     /* Get PCLK2 prescaler */
;;;1003     tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
000094  4d0a              LDR      r5,|L13.192|
000096  686d              LDR      r5,[r5,#4]
000098  f4055160          AND      r1,r5,#0x3800
;;;1004     tmp = tmp >> 11;
00009c  0ac9              LSRS     r1,r1,#11
;;;1005     presc = APBAHBPrescTable[tmp];
00009e  4d0b              LDR      r5,|L13.204|
0000a0  5c6b              LDRB     r3,[r5,r1]
;;;1006     /* PCLK2 clock frequency */
;;;1007     RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
0000a2  6845              LDR      r5,[r0,#4]
0000a4  40dd              LSRS     r5,r5,r3
0000a6  60c5              STR      r5,[r0,#0xc]
;;;1008     /* Get ADCCLK prescaler */
;;;1009     tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
0000a8  4d05              LDR      r5,|L13.192|
0000aa  686d              LDR      r5,[r5,#4]
0000ac  f4054140          AND      r1,r5,#0xc000
;;;1010     tmp = tmp >> 14;
0000b0  0b89              LSRS     r1,r1,#14
;;;1011     presc = ADCPrescTable[tmp];
0000b2  4d07              LDR      r5,|L13.208|
0000b4  5c6b              LDRB     r3,[r5,r1]
;;;1012     /* ADCCLK clock frequency */
;;;1013     RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
0000b6  68c5              LDR      r5,[r0,#0xc]
0000b8  fbb5f5f3          UDIV     r5,r5,r3
0000bc  6105              STR      r5,[r0,#0x10]
;;;1014   }
0000be  bd30              POP      {r4,r5,pc}
;;;1015   
                          ENDP

                  |L13.192|
                          DCD      0x40021000
                  |L13.196|
                          DCD      0x007a1200
                  |L13.200|
                          DCD      0x003d0900
                  |L13.204|
                          DCD      APBAHBPrescTable
                  |L13.208|
                          DCD      ADCPrescTable

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;1302     */
;;;1303   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;1304   {
000002  4601              MOV      r1,r0
;;;1305     uint32_t tmp = 0;
000004  2200              MOVS     r2,#0
;;;1306     uint32_t statusreg = 0;
000006  2300              MOVS     r3,#0
;;;1307     FlagStatus bitstatus = RESET;
000008  2000              MOVS     r0,#0
;;;1308     /* Check the parameters */
;;;1309     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;1310   
;;;1311     /* Get the RCC register index */
;;;1312     tmp = RCC_FLAG >> 5;
00000a  114a              ASRS     r2,r1,#5
;;;1313     if (tmp == 1)               /* The flag to check is in CR register */
00000c  2a01              CMP      r2,#1
00000e  d102              BNE      |L14.22|
;;;1314     {
;;;1315       statusreg = RCC->CR;
000010  4c09              LDR      r4,|L14.56|
000012  6823              LDR      r3,[r4,#0]
000014  e006              B        |L14.36|
                  |L14.22|
;;;1316     }
;;;1317     else if (tmp == 2)          /* The flag to check is in BDCR register */
000016  2a02              CMP      r2,#2
000018  d102              BNE      |L14.32|
;;;1318     {
;;;1319       statusreg = RCC->BDCR;
00001a  4c07              LDR      r4,|L14.56|
00001c  6a23              LDR      r3,[r4,#0x20]
00001e  e001              B        |L14.36|
                  |L14.32|
;;;1320     }
;;;1321     else                       /* The flag to check is in CSR register */
;;;1322     {
;;;1323       statusreg = RCC->CSR;
000020  4c05              LDR      r4,|L14.56|
000022  6a63              LDR      r3,[r4,#0x24]
                  |L14.36|
;;;1324     }
;;;1325   
;;;1326     /* Get the flag position */
;;;1327     tmp = RCC_FLAG & FLAG_Mask;
000024  f001021f          AND      r2,r1,#0x1f
;;;1328     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
000028  2401              MOVS     r4,#1
00002a  4094              LSLS     r4,r4,r2
00002c  401c              ANDS     r4,r4,r3
00002e  b10c              CBZ      r4,|L14.52|
;;;1329     {
;;;1330       bitstatus = SET;
000030  2001              MOVS     r0,#1
000032  e000              B        |L14.54|
                  |L14.52|
;;;1331     }
;;;1332     else
;;;1333     {
;;;1334       bitstatus = RESET;
000034  2000              MOVS     r0,#0
                  |L14.54|
;;;1335     }
;;;1336   
;;;1337     /* Return the flag status */
;;;1338     return bitstatus;
;;;1339   }
000036  bd10              POP      {r4,pc}
;;;1340   
                          ENDP

                  |L14.56|
                          DCD      0x40021000

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;1378     */
;;;1379   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000000  4601              MOV      r1,r0
;;;1380   {
;;;1381     ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1382     /* Check the parameters */
;;;1383     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;1384   
;;;1385     /* Check the status of the specified RCC interrupt */
;;;1386     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L15.20|
000006  6892              LDR      r2,[r2,#8]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L15.16|
;;;1387     {
;;;1388       bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L15.18|
                  |L15.16|
;;;1389     }
;;;1390     else
;;;1391     {
;;;1392       bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L15.18|
;;;1393     }
;;;1394   
;;;1395     /* Return the RCC_IT status */
;;;1396     return  bitstatus;
;;;1397   }
000012  4770              BX       lr
;;;1398   
                          ENDP

                  |L15.20|
                          DCD      0x40021000

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;582      */
;;;583    uint8_t RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L16.12|
;;;584    {
;;;585      return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
000002  6840              LDR      r0,[r0,#4]
000004  f000000c          AND      r0,r0,#0xc
;;;586    }
000008  4770              BX       lr
;;;587    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40021000

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;603      */
;;;604    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000000  4601              MOV      r1,r0
;;;605    {
;;;606      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;607      /* Check the parameters */
;;;608      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;609      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L17.20|
000006  6850              LDR      r0,[r2,#4]
;;;610      /* Clear HPRE[3:0] bits */
;;;611      tmpreg &= CFGR_HPRE_Reset_Mask;
000008  f02000f0          BIC      r0,r0,#0xf0
;;;612      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;613      tmpreg |= RCC_SYSCLK;
00000c  4308              ORRS     r0,r0,r1
;;;614      /* Store the new value */
;;;615      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;616    }
000010  4770              BX       lr
;;;617    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      0x40021000

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;269      */
;;;270    void RCC_HSEConfig(uint32_t RCC_HSE)
000000  4911              LDR      r1,|L18.72|
;;;271    {
;;;272      /* Check the parameters */
;;;273      assert_param(IS_RCC_HSE(RCC_HSE));
;;;274      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;275      /* Reset HSEON bit */
;;;276      RCC->CR &= CR_HSEON_Reset;
000002  6809              LDR      r1,[r1,#0]
000004  f4213180          BIC      r1,r1,#0x10000
000008  4a0f              LDR      r2,|L18.72|
00000a  6011              STR      r1,[r2,#0]
;;;277      /* Reset HSEBYP bit */
;;;278      RCC->CR &= CR_HSEBYP_Reset;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  f4212180          BIC      r1,r1,#0x40000
000014  6011              STR      r1,[r2,#0]
;;;279      /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
;;;280      switch(RCC_HSE)
000016  f5b03f80          CMP      r0,#0x10000
00001a  d003              BEQ      |L18.36|
00001c  f5b02f80          CMP      r0,#0x40000
000020  d10e              BNE      |L18.64|
000022  e006              B        |L18.50|
                  |L18.36|
;;;281      {
;;;282        case RCC_HSE_ON:
;;;283          /* Set HSEON bit */
;;;284          RCC->CR |= CR_HSEON_Set;
000024  4908              LDR      r1,|L18.72|
000026  6809              LDR      r1,[r1,#0]
000028  f4413180          ORR      r1,r1,#0x10000
00002c  4a06              LDR      r2,|L18.72|
00002e  6011              STR      r1,[r2,#0]
;;;285          break;
000030  e007              B        |L18.66|
                  |L18.50|
;;;286          
;;;287        case RCC_HSE_Bypass:
;;;288          /* Set HSEBYP and HSEON bits */
;;;289          RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
000032  4905              LDR      r1,|L18.72|
000034  6809              LDR      r1,[r1,#0]
000036  f44121a0          ORR      r1,r1,#0x50000
00003a  4a03              LDR      r2,|L18.72|
00003c  6011              STR      r1,[r2,#0]
;;;290          break;
00003e  e000              B        |L18.66|
                  |L18.64|
;;;291          
;;;292        default:
;;;293          break;
000040  bf00              NOP      
                  |L18.66|
000042  bf00              NOP                            ;285
;;;294      }
;;;295    }
000044  4770              BX       lr
;;;296    
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
                          DCD      0x40021000

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;353      */
;;;354    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L19.8|
;;;355    {
;;;356      /* Check the parameters */
;;;357      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;358      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;359    }
000004  4770              BX       lr
;;;360    
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x42420000

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;695      */
;;;696    void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L20.14|
;;;697    {
;;;698      /* Check the parameters */
;;;699      assert_param(IS_RCC_IT(RCC_IT));
;;;700      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;701      if (NewState != DISABLE)
;;;702      {
;;;703        /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
;;;704        *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
000002  4a06              LDR      r2,|L20.28|
000004  7a52              LDRB     r2,[r2,#9]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L20.28|
00000a  725a              STRB     r2,[r3,#9]
00000c  e004              B        |L20.24|
                  |L20.14|
;;;705      }
;;;706      else
;;;707      {
;;;708        /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
;;;709        *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
00000e  4a03              LDR      r2,|L20.28|
000010  7a52              LDRB     r2,[r2,#9]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L20.28|
000016  725a              STRB     r2,[r3,#9]
                  |L20.24|
;;;710      }
;;;711    }
000018  4770              BX       lr
;;;712    
                          ENDP

00001a  0000              DCW      0x0000
                  |L20.28|
                          DCD      0x40021000

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;824      */
;;;825    void RCC_LSEConfig(uint8_t RCC_LSE)
000000  2100              MOVS     r1,#0
;;;826    {
;;;827      /* Check the parameters */
;;;828      assert_param(IS_RCC_LSE(RCC_LSE));
;;;829      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;830      /* Reset LSEON bit */
;;;831      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  4a0b              LDR      r2,|L21.48|
000004  7011              STRB     r1,[r2,#0]
;;;832      /* Reset LSEBYP bit */
;;;833      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  4a0a              LDR      r2,|L21.48|
000008  3a20              SUBS     r2,r2,#0x20
00000a  f8821020          STRB     r1,[r2,#0x20]
;;;834      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;835      switch(RCC_LSE)
00000e  2801              CMP      r0,#1
000010  d002              BEQ      |L21.24|
000012  2804              CMP      r0,#4
000014  d108              BNE      |L21.40|
000016  e003              B        |L21.32|
                  |L21.24|
;;;836      {
;;;837        case RCC_LSE_ON:
;;;838          /* Set LSEON bit */
;;;839          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
000018  2101              MOVS     r1,#1
00001a  4a05              LDR      r2,|L21.48|
00001c  7011              STRB     r1,[r2,#0]
;;;840          break;
00001e  e004              B        |L21.42|
                  |L21.32|
;;;841          
;;;842        case RCC_LSE_Bypass:
;;;843          /* Set LSEBYP and LSEON bits */
;;;844          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
000020  2105              MOVS     r1,#5
000022  4a03              LDR      r2,|L21.48|
000024  7011              STRB     r1,[r2,#0]
;;;845          break;            
000026  e000              B        |L21.42|
                  |L21.40|
;;;846          
;;;847        default:
;;;848          break;      
000028  bf00              NOP      
                  |L21.42|
00002a  bf00              NOP                            ;840
;;;849      }
;;;850    }
00002c  4770              BX       lr
;;;851    
                          ENDP

00002e  0000              DCW      0x0000
                  |L21.48|
                          DCD      0x40021020

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;857      */
;;;858    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L22.8|
;;;859    {
;;;860      /* Check the parameters */
;;;861      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;862      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;863    }
000004  4770              BX       lr
;;;864    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      0x42420480

                          AREA ||i.RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  RCC_MCOConfig PROC
;;;1258     */
;;;1259   void RCC_MCOConfig(uint8_t RCC_MCO)
000000  4901              LDR      r1,|L23.8|
;;;1260   {
;;;1261     /* Check the parameters */
;;;1262     assert_param(IS_RCC_MCO(RCC_MCO));
;;;1263   
;;;1264     /* Perform Byte access to MCO bits to select the MCO source */
;;;1265     *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
000002  71c8              STRB     r0,[r1,#7]
;;;1266   }
000004  4770              BX       lr
;;;1267   
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x40021000

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;629      */
;;;630    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000000  4601              MOV      r1,r0
;;;631    {
;;;632      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;633      /* Check the parameters */
;;;634      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;635      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L24.20|
000006  6850              LDR      r0,[r2,#4]
;;;636      /* Clear PPRE1[2:0] bits */
;;;637      tmpreg &= CFGR_PPRE1_Reset_Mask;
000008  f42060e0          BIC      r0,r0,#0x700
;;;638      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;639      tmpreg |= RCC_HCLK;
00000c  4308              ORRS     r0,r0,r1
;;;640      /* Store the new value */
;;;641      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;642    }
000010  4770              BX       lr
;;;643    
                          ENDP

000012  0000              DCW      0x0000
                  |L24.20|
                          DCD      0x40021000

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;655      */
;;;656    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000000  4601              MOV      r1,r0
;;;657    {
;;;658      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;659      /* Check the parameters */
;;;660      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;661      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L25.20|
000006  6850              LDR      r0,[r2,#4]
;;;662      /* Clear PPRE2[2:0] bits */
;;;663      tmpreg &= CFGR_PPRE2_Reset_Mask;
000008  f4205060          BIC      r0,r0,#0x3800
;;;664      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;665      tmpreg |= RCC_HCLK << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;666      /* Store the new value */
;;;667      RCC->CFGR = tmpreg;
000010  6050              STR      r0,[r2,#4]
;;;668    }
000012  4770              BX       lr
;;;669    
                          ENDP

                  |L25.20|
                          DCD      0x40021000

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;400      */
;;;401    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L26.8|
;;;402    {
;;;403      /* Check the parameters */
;;;404      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;405    
;;;406      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;407    }
000004  4770              BX       lr
;;;408    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x42420000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;377      */
;;;378    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
000000  4602              MOV      r2,r0
;;;379    {
;;;380      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;381    
;;;382      /* Check the parameters */
;;;383      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;384      assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
;;;385    
;;;386      tmpreg = RCC->CFGR;
000004  4b04              LDR      r3,|L27.24|
000006  6858              LDR      r0,[r3,#4]
;;;387      /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
;;;388      tmpreg &= CFGR_PLL_Mask;
000008  f420107c          BIC      r0,r0,#0x3f0000
;;;389      /* Set the PLL configuration bits */
;;;390      tmpreg |= RCC_PLLSource | RCC_PLLMul;
00000c  ea420301          ORR      r3,r2,r1
000010  4318              ORRS     r0,r0,r3
;;;391      /* Store the new value */
;;;392      RCC->CFGR = tmpreg;
000012  4b01              LDR      r3,|L27.24|
000014  6058              STR      r0,[r3,#4]
;;;393    }
000016  4770              BX       lr
;;;394    
                          ENDP

                  |L27.24|
                          DCD      0x40021000

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;888      */
;;;889    void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;890    {
;;;891      /* Check the parameters */
;;;892      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;893      *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;894    }
000004  4770              BX       lr
;;;895    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x4242043c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;874      */
;;;875    void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
000000  4902              LDR      r1,|L29.12|
;;;876    {
;;;877      /* Check the parameters */
;;;878      assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;879      /* Select the RTC clock source */
;;;880      RCC->BDCR |= RCC_RTCCLKSource;
000002  6a09              LDR      r1,[r1,#0x20]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L29.12|
000008  6211              STR      r1,[r2,#0x20]
;;;881    }
00000a  4770              BX       lr
;;;882    
                          ENDP

                  |L29.12|
                          DCD      0x40021000

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;559      */
;;;560    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000000  4601              MOV      r1,r0
;;;561    {
;;;562      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;563      /* Check the parameters */
;;;564      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;565      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L30.20|
000006  6850              LDR      r0,[r2,#4]
;;;566      /* Clear SW[1:0] bits */
;;;567      tmpreg &= CFGR_SW_Mask;
000008  f0200003          BIC      r0,r0,#3
;;;568      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;569      tmpreg |= RCC_SYSCLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;570      /* Store the new value */
;;;571      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;572    }
000010  4770              BX       lr
;;;573    
                          ENDP

000012  0000              DCW      0x0000
                  |L30.20|
                          DCD      0x40021000

                          AREA ||i.RCC_USBCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_USBCLKConfig PROC
;;;723      */
;;;724    void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
000000  4901              LDR      r1,|L31.8|
;;;725    {
;;;726      /* Check the parameters */
;;;727      assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
;;;728    
;;;729      *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
000002  6008              STR      r0,[r1,#0]
;;;730    }
000004  4770              BX       lr
;;;731    #else
                          ENDP

000006  0000              DCW      0x0000
                  |L31.8|
                          DCD      0x424200d8

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=1

                  RCC_WaitForHSEStartUp PROC
;;;303      */
;;;304    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b538              PUSH     {r3-r5,lr}
;;;305    {
;;;306      __IO uint32_t StartUpCounter = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;307      ErrorStatus status = ERROR;
000006  2400              MOVS     r4,#0
;;;308      FlagStatus HSEStatus = RESET;
000008  2500              MOVS     r5,#0
;;;309      
;;;310      /* Wait till HSE is ready and if Time out is reached exit */
;;;311      do
00000a  bf00              NOP      
                  |L32.12|
;;;312      {
;;;313        HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
00000c  2031              MOVS     r0,#0x31
00000e  f7fffffe          BL       RCC_GetFlagStatus
000012  4605              MOV      r5,r0
;;;314        StartUpCounter++;  
000014  9800              LDR      r0,[sp,#0]
000016  1c40              ADDS     r0,r0,#1
000018  9000              STR      r0,[sp,#0]
;;;315      } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
00001a  9800              LDR      r0,[sp,#0]
00001c  f5b06fa0          CMP      r0,#0x500
000020  d001              BEQ      |L32.38|
000022  2d00              CMP      r5,#0
000024  d0f2              BEQ      |L32.12|
                  |L32.38|
;;;316      
;;;317      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
000026  2031              MOVS     r0,#0x31
000028  f7fffffe          BL       RCC_GetFlagStatus
00002c  b108              CBZ      r0,|L32.50|
;;;318      {
;;;319        status = SUCCESS;
00002e  2401              MOVS     r4,#1
000030  e000              B        |L32.52|
                  |L32.50|
;;;320      }
;;;321      else
;;;322      {
;;;323        status = ERROR;
000032  2400              MOVS     r4,#0
                  |L32.52|
;;;324      }  
;;;325      return (status);
000034  4620              MOV      r0,r4
;;;326    }
000036  bd38              POP      {r3-r5,pc}
;;;327    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  ADCPrescTable
000010  02040608          DCB      0x02,0x04,0x06,0x08
