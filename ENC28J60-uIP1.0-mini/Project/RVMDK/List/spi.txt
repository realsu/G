; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\spi.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\spi.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\spi.crf ..\..\Source\src\uIP_enc28j60\SPI.C]
                          THUMB

                          AREA ||i.SPI1_ReadWrite||, CODE, READONLY, ALIGN=2

                  SPI1_ReadWrite PROC
;;;50     //SPI1读写一字节数据
;;;51     unsigned char	SPI1_ReadWrite(unsigned char writedat)
000000  b510              PUSH     {r4,lr}
;;;52     	{
000002  4604              MOV      r4,r0
;;;53     	/* Loop while DR register in not emplty */
;;;54     	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L1.6|
000006  2102              MOVS     r1,#2
000008  480a              LDR      r0,|L1.52|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L1.6|
;;;55     	
;;;56     	/* Send byte through the SPI1 peripheral */
;;;57     	SPI_I2S_SendData(SPI1, writedat);
000012  4621              MOV      r1,r4
000014  4807              LDR      r0,|L1.52|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;58     	
;;;59     	/* Wait to receive a byte */
;;;60     	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L1.28|
00001c  2101              MOVS     r1,#1
00001e  4805              LDR      r0,|L1.52|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L1.28|
;;;61     	
;;;62     	/* Return the byte read from the SPI bus */
;;;63     	return SPI_I2S_ReceiveData(SPI1);
000028  4802              LDR      r0,|L1.52|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c0              UXTB     r0,r0
;;;64     	}
000030  bd10              POP      {r4,pc}
;;;65     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40013000

                          AREA ||i.SPI2_Init||, CODE, READONLY, ALIGN=2

                  SPI2_Init PROC
;;;8      
;;;9      void SPI2_Init(void)
000000  b500              PUSH     {lr}
;;;10     	{
000002  b087              SUB      sp,sp,#0x1c
;;;11     	SPI_InitTypeDef  SPI_InitStructure;
;;;12     	GPIO_InitTypeDef GPIO_InitStructure;
;;;13     	
;;;14     	/* 使能SPI1时钟 */
;;;15     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000004  2101              MOVS     r1,#1
000006  0308              LSLS     r0,r1,#12
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;16     	
;;;17     	/* 配置SPI1的SCK,MISO MOSI */
;;;18     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
00000c  20e0              MOVS     r0,#0xe0
00000e  f8ad0004          STRH     r0,[sp,#4]
;;;19     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000012  2001              MOVS     r0,#1
000014  f88d0006          STRB     r0,[sp,#6]
;;;20     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;			  //复用功能
000018  2018              MOVS     r0,#0x18
00001a  f88d0007          STRB     r0,[sp,#7]
;;;21     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00001e  a901              ADD      r1,sp,#4
000020  481e              LDR      r0,|L2.156|
000022  f7fffffe          BL       GPIO_Init
;;;22     	
;;;23     	/* 配置SPI1的ENC28J60片选 */
;;;24         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
000026  2010              MOVS     r0,#0x10
000028  f8ad0004          STRH     r0,[sp,#4]
;;;25         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
00002c  2001              MOVS     r0,#1
00002e  f88d0006          STRB     r0,[sp,#6]
;;;26         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000032  2010              MOVS     r0,#0x10
000034  f88d0007          STRB     r0,[sp,#7]
;;;27         GPIO_Init(GPIOA, &GPIO_InitStructure);
000038  a901              ADD      r1,sp,#4
00003a  4818              LDR      r0,|L2.156|
00003c  f7fffffe          BL       GPIO_Init
;;;28     
;;;29     	GPIO_SetBits(GPIOA, GPIO_Pin_4);   	
000040  2110              MOVS     r1,#0x10
000042  4816              LDR      r0,|L2.156|
000044  f7fffffe          BL       GPIO_SetBits
;;;30     
;;;31     
;;;32     	/* SPI1配置 */ 
;;;33     	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000048  2000              MOVS     r0,#0
00004a  f8ad0008          STRH     r0,[sp,#8]
;;;34     	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
00004e  f44f7082          MOV      r0,#0x104
000052  f8ad000a          STRH     r0,[sp,#0xa]
;;;35     	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000056  2000              MOVS     r0,#0
000058  f8ad000c          STRH     r0,[sp,#0xc]
;;;36     	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
00005c  f8ad000e          STRH     r0,[sp,#0xe]
;;;37     	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
000060  f8ad0010          STRH     r0,[sp,#0x10]
;;;38     	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
000064  f44f7000          MOV      r0,#0x200
000068  f8ad0012          STRH     r0,[sp,#0x12]
;;;39     	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
00006c  2028              MOVS     r0,#0x28
00006e  f8ad0014          STRH     r0,[sp,#0x14]
;;;40     	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
000072  2000              MOVS     r0,#0
000074  f8ad0016          STRH     r0,[sp,#0x16]
;;;41     	SPI_InitStructure.SPI_CRCPolynomial = 7;
000078  2007              MOVS     r0,#7
00007a  f8ad0018          STRH     r0,[sp,#0x18]
;;;42     	SPI_Init(SPI1, &SPI_InitStructure);
00007e  a902              ADD      r1,sp,#8
000080  4807              LDR      r0,|L2.160|
000082  f7fffffe          BL       SPI_Init
;;;43     	/* 使能SPI1  */
;;;44     	SPI_Cmd(SPI1, ENABLE); 
000086  2101              MOVS     r1,#1
000088  4805              LDR      r0,|L2.160|
00008a  f7fffffe          BL       SPI_Cmd
;;;45     
;;;46     //	GPIO_SetBits(GPIOB, GPIO_Pin_7);			//禁止触摸电路的片选
;;;47       	GPIO_SetBits(GPIOA, GPIO_Pin_4);			//禁止ENC28J60的片选
00008e  2110              MOVS     r1,#0x10
000090  4802              LDR      r0,|L2.156|
000092  f7fffffe          BL       GPIO_SetBits
;;;48     	}
000096  b007              ADD      sp,sp,#0x1c
000098  bd00              POP      {pc}
;;;49     
                          ENDP

00009a  0000              DCW      0x0000
                  |L2.156|
                          DCD      0x40010800
                  |L2.160|
                          DCD      0x40013000
