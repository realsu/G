; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\Core\CM3 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Source\inc -I..\..\Libraries\uIP-1.0\apps\webserver -I..\..\Libraries\uIP-1.0\uip -I..\..\Source\src\uIP_enc28j60 -I..\..\Source\inc -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\main.crf ..\..\Source\src\main.c]
                          THUMB

                          AREA ||i.Delay||, CODE, READONLY, ALIGN=1

                  Delay PROC
;;;263    
;;;264    void Delay(vu32 nCount) {
000000  b501              PUSH     {r0,lr}
;;;265      for(; nCount != 0; nCount--);
000002  e002              B        |L1.10|
                  |L1.4|
000004  9800              LDR      r0,[sp,#0]
000006  1e40              SUBS     r0,r0,#1
000008  9000              STR      r0,[sp,#0]
                  |L1.10|
00000a  9800              LDR      r0,[sp,#0]
00000c  2800              CMP      r0,#0
00000e  d1f9              BNE      |L1.4|
;;;266      }
000010  bd08              POP      {r3,pc}
;;;267    /*******************************************************************************
                          ENDP


                          AREA ||i.DispLogo||, CODE, READONLY, ALIGN=2

                  DispLogo PROC
;;;302    */
;;;303    static void DispLogo(void)
000000  b510              PUSH     {r4,lr}
;;;304    {
;;;305    	/* 通过串口输出例程名和更新日期 */
;;;306    	PrintfLogo(EXAMPLE_NAME, EXAMPLE_DATE);
000002  a102              ADR      r1,|L2.12|
000004  a004              ADR      r0,|L2.24|
000006  f7fffffe          BL       PrintfLogo
;;;307    }
00000a  bd10              POP      {r4,pc}
;;;308    
                          ENDP

                  |L2.12|
00000c  32303130          DCB      "2010-07-22",0
000010  2d30372d
000014  323200  
000017  00                DCB      0
                  |L2.24|
000018  75495031          DCB      "uIP1.0 TCP Demo",0
00001c  2e302054
000020  43502044
000024  656d6f00

                          AREA ||i.GPIO_Configuration||, CODE, READONLY, ALIGN=2

                  GPIO_Configuration PROC
;;;233    
;;;234    void GPIO_Configuration(void)
000000  b508              PUSH     {r3,lr}
;;;235    {
;;;236      
;;;237      GPIO_InitTypeDef GPIO_InitStructure;
;;;238      RCC_APB2PeriphClockCmd( RCC_APB2Periph_USART1 |RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
000002  2101              MOVS     r1,#1
000004  f244007c          MOV      r0,#0x407c
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;239                             RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD |
;;;240                             RCC_APB2Periph_GPIOE, ENABLE);
;;;241      	
;;;242    	
;;;243    	/* Configure the GPIO_LED pin */
;;;244    	 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00000c  f44f7000          MOV      r0,#0x200
000010  f8ad0000          STRH     r0,[sp,#0]
;;;245    	 GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 	//推挽输出
000014  2010              MOVS     r0,#0x10
000016  f88d0003          STRB     r0,[sp,#3]
;;;246    	 GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	
00001a  2003              MOVS     r0,#3
00001c  f88d0002          STRB     r0,[sp,#2]
;;;247    	 GPIO_Init(GPIOA, &GPIO_InitStructure);
000020  4669              MOV      r1,sp
000022  4813              LDR      r0,|L3.112|
000024  f7fffffe          BL       GPIO_Init
;;;248    
;;;249    	 GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000028  f44f6080          MOV      r0,#0x400
00002c  f8ad0000          STRH     r0,[sp,#0]
;;;250    	 GPIO_Init(GPIOA, &GPIO_InitStructure);
000030  4669              MOV      r1,sp
000032  480f              LDR      r0,|L3.112|
000034  f7fffffe          BL       GPIO_Init
;;;251          
;;;252      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
000038  f44f7080          MOV      r0,#0x100
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;253      GPIO_Init(GPIOB, &GPIO_InitStructure);
000040  4669              MOV      r1,sp
000042  480c              LDR      r0,|L3.116|
000044  f7fffffe          BL       GPIO_Init
;;;254    
;;;255      GPIO_ResetBits(GPIOB, GPIO_Pin_8);
000048  f44f7180          MOV      r1,#0x100
00004c  4809              LDR      r0,|L3.116|
00004e  f7fffffe          BL       GPIO_ResetBits
;;;256      Delay(0xAFFF);					   
000052  f64a70ff          MOV      r0,#0xafff
000056  f7fffffe          BL       Delay
;;;257      GPIO_SetBits(GPIOB, GPIO_Pin_8 );		 	 	   //复位ENC28J60
00005a  f44f7180          MOV      r1,#0x100
00005e  4805              LDR      r0,|L3.116|
000060  f7fffffe          BL       GPIO_SetBits
;;;258      Delay(0xAFFF);		  	 	
000064  f64a70ff          MOV      r0,#0xafff
000068  f7fffffe          BL       Delay
;;;259    
;;;260    
;;;261    }
00006c  bd08              POP      {r3,pc}
;;;262    
                          ENDP

00006e  0000              DCW      0x0000
                  |L3.112|
                          DCD      0x40010800
                  |L3.116|
                          DCD      0x40010c00

                          AREA ||i.InitNet||, CODE, READONLY, ALIGN=2

                  InitNet PROC
;;;209    */
;;;210    void InitNet(void)
000000  b508              PUSH     {r3,lr}
;;;211    {
;;;212    	uip_ipaddr_t ipaddr;
;;;213    
;;;214    
;;;215    	tapdev_init();
000002  f7fffffe          BL       tapdev_init
;;;216    
;;;217    	printf("uip_init\n\r");
000006  a023              ADR      r0,|L4.148|
000008  f7fffffe          BL       __2printf
;;;218    	uip_init();
00000c  f7fffffe          BL       uip_init
;;;219    
;;;220    	printf("uip ip address : 192,168,0,15\n\r");
000010  a023              ADR      r0,|L4.160|
000012  f7fffffe          BL       __2printf
;;;221    	uip_ipaddr(ipaddr, 192,168,0,15);
000016  bf00              NOP      
000018  f64a00c0          MOV      r0,#0xa8c0
00001c  f8ad0000          STRH     r0,[sp,#0]
000020  f44f6070          MOV      r0,#0xf00
000024  f8ad0002          STRH     r0,[sp,#2]
000028  bf00              NOP      
;;;222    	uip_sethostaddr(ipaddr);
00002a  bf00              NOP      
00002c  f8bd0000          LDRH     r0,[sp,#0]
000030  4923              LDR      r1,|L4.192|
000032  8008              STRH     r0,[r1,#0]
000034  f8bd0002          LDRH     r0,[sp,#2]
000038  8048              STRH     r0,[r1,#2]
00003a  bf00              NOP      
;;;223    
;;;224    	printf("uip route address : 192,168,0,1\n\r");
00003c  a021              ADR      r0,|L4.196|
00003e  f7fffffe          BL       __2printf
;;;225    	uip_ipaddr(ipaddr, 192,168,0,1);
000042  bf00              NOP      
000044  f64a00c0          MOV      r0,#0xa8c0
000048  f8ad0000          STRH     r0,[sp,#0]
00004c  f44f7080          MOV      r0,#0x100
000050  f8ad0002          STRH     r0,[sp,#2]
000054  bf00              NOP      
;;;226    	uip_setdraddr(ipaddr);
000056  bf00              NOP      
000058  f8bd0000          LDRH     r0,[sp,#0]
00005c  4922              LDR      r1,|L4.232|
00005e  8008              STRH     r0,[r1,#0]
000060  f8bd0002          LDRH     r0,[sp,#2]
000064  8048              STRH     r0,[r1,#2]
000066  bf00              NOP      
;;;227    
;;;228    	printf("uip net mask : 255,255,255,0\n\r");
000068  a020              ADR      r0,|L4.236|
00006a  f7fffffe          BL       __2printf
;;;229    	uip_ipaddr(ipaddr, 255,255,255,0);
00006e  bf00              NOP      
000070  f64f70ff          MOV      r0,#0xffff
000074  f8ad0000          STRH     r0,[sp,#0]
000078  20ff              MOVS     r0,#0xff
00007a  f8ad0002          STRH     r0,[sp,#2]
00007e  bf00              NOP      
;;;230    	uip_setnetmask(ipaddr);
000080  bf00              NOP      
000082  f8bd0000          LDRH     r0,[sp,#0]
000086  4921              LDR      r1,|L4.268|
000088  8008              STRH     r0,[r1,#0]
00008a  f8bd0002          LDRH     r0,[sp,#2]
00008e  8048              STRH     r0,[r1,#2]
000090  bf00              NOP      
;;;231    
;;;232    }
000092  bd08              POP      {r3,pc}
;;;233    
                          ENDP

                  |L4.148|
000094  7569705f          DCB      "uip_init\n\r",0
000098  696e6974
00009c  0a0d00  
00009f  00                DCB      0
                  |L4.160|
0000a0  75697020          DCB      "uip ip address : 192,168,0,15\n\r",0
0000a4  69702061
0000a8  64647265
0000ac  7373203a
0000b0  20313932
0000b4  2c313638
0000b8  2c302c31
0000bc  350a0d00
                  |L4.192|
                          DCD      uip_hostaddr
                  |L4.196|
0000c4  75697020          DCB      "uip route address : 192,168,0,1\n\r",0
0000c8  726f7574
0000cc  65206164
0000d0  64726573
0000d4  73203a20
0000d8  3139322c
0000dc  3136382c
0000e0  302c310a
0000e4  0d00    
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L4.232|
                          DCD      uip_draddr
                  |L4.236|
0000ec  75697020          DCB      "uip net mask : 255,255,255,0\n\r",0
0000f0  6e657420
0000f4  6d61736b
0000f8  203a2032
0000fc  35352c32
000100  35352c32
000104  35352c30
000108  0a0d00  
00010b  00                DCB      0
                  |L4.268|
                          DCD      uip_netmask

                          AREA ||i.Init_fd||, CODE, READONLY, ALIGN=2

                  Init_fd PROC
;;;272    */
;;;273    static void Init_fd(void)
000000  b570              PUSH     {r4-r6,lr}
;;;274    {
;;;275    	/*
;;;276    		这个函数是ST库中的函数，函数实体在
;;;277    		Libraries\CMSIS\Core\CM3\system_stm32f10x.c
;;;278    
;;;279    		配置内部Flash接口，初始化PLL，配置系统频率
;;;280    		系统时钟缺省配置为72MHz，你如果需要更改，则需要去修改相关的头文件中的宏定义
;;;281    	 */
;;;282    	SystemInit();
000002  f7fffffe          BL       SystemInit
;;;283    
;;;284    	/* 配置按键GPIO和LED GPIO */
;;;285    	GPIO_Configuration();
000006  f7fffffe          BL       GPIO_Configuration
;;;286    
;;;287    	/* 配置串口 */
;;;288    	USART2_Configuration();
00000a  f7fffffe          BL       USART2_Configuration
;;;289        uart_init(57600);
00000e  f44f4061          MOV      r0,#0xe100
000012  f7fffffe          BL       uart_init
;;;290    
;;;291    
;;;292    	/* 配置systic作为1ms中断,这个函数在
;;;293    	\Libraries\CMSIS\Core\CM3\core_cm3.h */
;;;294    	SysTick_Config(SystemFrequency / 1000);
000016  4814              LDR      r0,|L5.104|
000018  6800              LDR      r0,[r0,#0]  ; SystemFrequency
00001a  f44f727a          MOV      r2,#0x3e8
00001e  fbb0f1f2          UDIV     r1,r0,r2
000022  f1b17f80          CMP      r1,#0x1000000
000026  d300              BCC      |L5.42|
000028  e01d              B        |L5.102|
                  |L5.42|
00002a  f021407f          BIC      r0,r1,#0xff000000
00002e  1e40              SUBS     r0,r0,#1
000030  f04f22e0          MOV      r2,#0xe000e000
000034  6150              STR      r0,[r2,#0x14]
000036  1750              ASRS     r0,r2,#29
000038  220f              MOVS     r2,#0xf
00003a  2800              CMP      r0,#0
00003c  da07              BGE      |L5.78|
00003e  0713              LSLS     r3,r2,#28
000040  0e1d              LSRS     r5,r3,#24
000042  4b0a              LDR      r3,|L5.108|
000044  f000040f          AND      r4,r0,#0xf
000048  1f24              SUBS     r4,r4,#4
00004a  551d              STRB     r5,[r3,r4]
00004c  e003              B        |L5.86|
                  |L5.78|
00004e  0713              LSLS     r3,r2,#28
000050  0e1c              LSRS     r4,r3,#24
000052  4b07              LDR      r3,|L5.112|
000054  541c              STRB     r4,[r3,r0]
                  |L5.86|
000056  bf00              NOP      
000058  2000              MOVS     r0,#0
00005a  f04f22e0          MOV      r2,#0xe000e000
00005e  6190              STR      r0,[r2,#0x18]
000060  2007              MOVS     r0,#7
000062  6110              STR      r0,[r2,#0x10]
000064  bf00              NOP      
                  |L5.102|
;;;295    }
000066  bd70              POP      {r4-r6,pc}
;;;296    
                          ENDP

                  |L5.104|
                          DCD      SystemFrequency
                  |L5.108|
                          DCD      0xe000ed18
                  |L5.112|
                          DCD      0xe000e400

                          AREA ||i.UipPro||, CODE, READONLY, ALIGN=2

                  UipPro PROC
;;;109    */
;;;110    void UipPro(void)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112    	uint8_t i;
;;;113    	static struct timer periodic_timer, arp_timer;
;;;114    	static char timer_ok = 0;	/* fd*/
;;;115    
;;;116    	/* 创建2个定时器，只用执行1次 */
;;;117    	if (timer_ok == 0)
000002  4833              LDR      r0,|L6.208|
000004  7800              LDRB     r0,[r0,#0]  ; timer_ok
000006  b958              CBNZ     r0,|L6.32|
;;;118    	{
;;;119    		timer_ok = 1;
000008  2001              MOVS     r0,#1
00000a  4931              LDR      r1,|L6.208|
00000c  7008              STRB     r0,[r1,#0]
;;;120    		timer_set(&periodic_timer, CLOCK_SECOND / 2);  /* 创建1个0.5秒的定时器 */
00000e  2132              MOVS     r1,#0x32
000010  4830              LDR      r0,|L6.212|
000012  f7fffffe          BL       timer_set
;;;121    		timer_set(&arp_timer, CLOCK_SECOND * 10);	   /* 创建1个10秒的定时器 */
000016  f44f717a          MOV      r1,#0x3e8
00001a  482f              LDR      r0,|L6.216|
00001c  f7fffffe          BL       timer_set
                  |L6.32|
;;;122    	}
;;;123    
;;;124    	/*
;;;125    		从网络设备读取一个IP包,返回数据长度 (非阻塞)
;;;126    		这个地方没有使用DM9000AEP的中断功能，采用的是查询方式
;;;127    	*/
;;;128    	uip_len = tapdev_read();	/* uip_len 是在uip中定义的全局变量 */
000020  f7fffffe          BL       tapdev_read
000024  492d              LDR      r1,|L6.220|
000026  8008              STRH     r0,[r1,#0]
;;;129    	if(uip_len > 0)
000028  4608              MOV      r0,r1
00002a  8800              LDRH     r0,[r0,#0]  ; uip_len
00002c  2800              CMP      r0,#0
00002e  dd24              BLE      |L6.122|
;;;130    	{
;;;131    		/* 处理IP数据包(只有校验通过的IP包才会被接收) */
;;;132    		if(BUF->type == htons(UIP_ETHTYPE_IP))
000030  f44f6000          MOV      r0,#0x800
000034  f7fffffe          BL       htons
000038  4929              LDR      r1,|L6.224|
00003a  8989              LDRH     r1,[r1,#0xc]  ; uip_buf
00003c  4288              CMP      r0,r1
00003e  d10b              BNE      |L6.88|
;;;133    		{
;;;134    			uip_arp_ipin();
;;;135    			uip_input();
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       uip_process
;;;136    			/*
;;;137    				当上面的函数执行后，如果需要发送数据，则全局变量 uip_len > 0
;;;138    				需要发送的数据在uip_buf, 长度是uip_len  (这是2个全局变量)
;;;139    			*/
;;;140    			if (uip_len > 0)
000046  4825              LDR      r0,|L6.220|
000048  8800              LDRH     r0,[r0,#0]  ; uip_len
00004a  2800              CMP      r0,#0
00004c  dd3f              BLE      |L6.206|
;;;141    			{
;;;142    				uip_arp_out();
00004e  f7fffffe          BL       uip_arp_out
;;;143    				tapdev_send();
000052  f7fffffe          BL       tapdev_send
000056  e03a              B        |L6.206|
                  |L6.88|
;;;144    			}
;;;145    		}
;;;146    		/* 处理arp报文 */
;;;147    		else if (BUF->type == htons(UIP_ETHTYPE_ARP))
000058  f6400006          MOV      r0,#0x806
00005c  f7fffffe          BL       htons
000060  491f              LDR      r1,|L6.224|
000062  8989              LDRH     r1,[r1,#0xc]  ; uip_buf
000064  4288              CMP      r0,r1
000066  d132              BNE      |L6.206|
;;;148    		{
;;;149    			uip_arp_arpin();
000068  f7fffffe          BL       uip_arp_arpin
;;;150    			/*
;;;151    				当上面的函数执行后，如果需要发送数据，则全局变量 uip_len > 0
;;;152    				需要发送的数据在uip_buf, 长度是uip_len  (这是2个全局变量)
;;;153    			*/
;;;154    			if (uip_len > 0)
00006c  481b              LDR      r0,|L6.220|
00006e  8800              LDRH     r0,[r0,#0]  ; uip_len
000070  2800              CMP      r0,#0
000072  dd2c              BLE      |L6.206|
;;;155    			{
;;;156    				tapdev_send();
000074  f7fffffe          BL       tapdev_send
000078  e029              B        |L6.206|
                  |L6.122|
;;;157    			}
;;;158    		}
;;;159    	}
;;;160    	else if(timer_expired(&periodic_timer))	/* 0.5秒定时器超时 */
00007a  4816              LDR      r0,|L6.212|
00007c  f7fffffe          BL       timer_expired
000080  b328              CBZ      r0,|L6.206|
;;;161    	{
;;;162    		timer_reset(&periodic_timer);	/* 复位0.5秒定时器 */
000082  4814              LDR      r0,|L6.212|
000084  f7fffffe          BL       timer_reset
;;;163    
;;;164    		/* 轮流处理每个TCP连接, UIP_CONNS缺省是10个 */
;;;165    		for(i = 0; i < UIP_CONNS; i++)
000088  2400              MOVS     r4,#0
00008a  e015              B        |L6.184|
                  |L6.140|
;;;166    		{
;;;167    			uip_periodic(i);	/* 处理TCP通信事件 */
00008c  bf00              NOP      
00008e  eb040084          ADD      r0,r4,r4,LSL #2
000092  4914              LDR      r1,|L6.228|
000094  eb0100c0          ADD      r0,r1,r0,LSL #3
000098  4913              LDR      r1,|L6.232|
00009a  6008              STR      r0,[r1,#0]  ; uip_conn
00009c  2002              MOVS     r0,#2
00009e  f7fffffe          BL       uip_process
0000a2  bf00              NOP      
;;;168    			/*
;;;169    				当上面的函数执行后，如果需要发送数据，则全局变量 uip_len > 0
;;;170    				需要发送的数据在uip_buf, 长度是uip_len  (这是2个全局变量)
;;;171    			*/
;;;172    			if(uip_len > 0)
0000a4  480d              LDR      r0,|L6.220|
0000a6  8800              LDRH     r0,[r0,#0]  ; uip_len
0000a8  2800              CMP      r0,#0
0000aa  dd03              BLE      |L6.180|
;;;173    			{
;;;174    				uip_arp_out();
0000ac  f7fffffe          BL       uip_arp_out
;;;175    				tapdev_send();
0000b0  f7fffffe          BL       tapdev_send
                  |L6.180|
0000b4  1c60              ADDS     r0,r4,#1              ;165
0000b6  b2c4              UXTB     r4,r0                 ;165
                  |L6.184|
0000b8  2c28              CMP      r4,#0x28              ;165
0000ba  dbe7              BLT      |L6.140|
;;;176    			}
;;;177    		}
;;;178    
;;;179    	#if UIP_UDP
;;;180    		/* 轮流处理每个UDP连接, UIP_UDP_CONNS缺省是10个 */
;;;181    		for(i = 0; i < UIP_UDP_CONNS; i++)
;;;182    		{
;;;183    			uip_udp_periodic(i);	/*处理UDP通信事件 */
;;;184    			/* If the above function invocation resulted in data that
;;;185    			should be sent out on the network, the global variable
;;;186    			uip_len is set to a value > 0. */
;;;187    			if(uip_len > 0)
;;;188    			{
;;;189    			uip_arp_out();
;;;190    			tapdev_send();
;;;191    			}
;;;192    		}
;;;193    	#endif /* UIP_UDP */
;;;194    
;;;195    		/* 每隔10秒调用1次ARP定时器函数 */
;;;196    		if (timer_expired(&arp_timer))
0000bc  4806              LDR      r0,|L6.216|
0000be  f7fffffe          BL       timer_expired
0000c2  b120              CBZ      r0,|L6.206|
;;;197    		{
;;;198    			timer_reset(&arp_timer);
0000c4  4804              LDR      r0,|L6.216|
0000c6  f7fffffe          BL       timer_reset
;;;199    			uip_arp_timer();
0000ca  f7fffffe          BL       uip_arp_timer
                  |L6.206|
;;;200    		}
;;;201    	}
;;;202    }
0000ce  bd10              POP      {r4,pc}
;;;203    
                          ENDP

                  |L6.208|
                          DCD      timer_ok
                  |L6.212|
                          DCD      periodic_timer
                  |L6.216|
                          DCD      arp_timer
                  |L6.220|
                          DCD      uip_len
                  |L6.224|
                          DCD      uip_buf
                  |L6.228|
                          DCD      uip_conns
                  |L6.232|
                          DCD      uip_conn

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;84     */
;;;85     int main(void)
000000  f7fffffe          BL       Init_fd
;;;86     {
;;;87     	Init_fd();	//板子资源的初始化
;;;88     	DispLogo();		/* 显示例程Logo */
000004  f7fffffe          BL       DispLogo
;;;89     	SPI2_Init();
000008  f7fffffe          BL       SPI2_Init
;;;90         
;;;91     	InitNet();		/* 初始化网络设备以及UIP协议栈，配置IP地址 */
00000c  f7fffffe          BL       InitNet
;;;92     
;;;93     	/* 创建一个TCP监听端口和http监听端口，端口号为1200，80 */
;;;94     	uip_listen(HTONS(1200));
000010  f24b0004          MOV      r0,#0xb004
000014  f7fffffe          BL       uip_listen
;;;95     	uip_listen(HTONS(5005));
000018  f6485013          MOV      r0,#0x8d13
00001c  f7fffffe          BL       uip_listen
;;;96     	while (1)
000020  e001              B        |L7.38|
                  |L7.34|
;;;97     	{
;;;98     		UipPro();		/* 处理uip事件，必须插入到用户程序的循环体中 */
000022  f7fffffe          BL       UipPro
                  |L7.38|
000026  e7fc              B        |L7.34|
;;;99     
;;;100    
;;;101    	}
;;;102    }
;;;103    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  periodic_timer
                          %        8
                  arp_timer
                          %        8
                  timer_ok
000010  00                DCB      0x00

                  __ARM_use_no_argv EQU 0
